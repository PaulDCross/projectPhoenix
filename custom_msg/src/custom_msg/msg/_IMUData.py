"""autogenerated by genmsg_py from IMUData.msg. Do not edit."""
import roslib.message
import struct


class IMUData(roslib.message.Message):
  _md5sum = "e33b22d8a8de4d1e6eaa544318f91d83"
  _type = "custom_msg/IMUData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 yaw
float32 pitch
float32 roll
float32 acc_x
float32 acc_y
float32 acc_z
float32 vel_x
float32 vel_y
float32 vel_z

"""
  __slots__ = ['yaw','pitch','roll','acc_x','acc_y','acc_z','vel_x','vel_y','vel_z']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       yaw,pitch,roll,acc_x,acc_y,acc_z,vel_x,vel_y,vel_z
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(IMUData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.yaw is None:
        self.yaw = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.roll is None:
        self.roll = 0.
      if self.acc_x is None:
        self.acc_x = 0.
      if self.acc_y is None:
        self.acc_y = 0.
      if self.acc_z is None:
        self.acc_z = 0.
      if self.vel_x is None:
        self.vel_x = 0.
      if self.vel_y is None:
        self.vel_y = 0.
      if self.vel_z is None:
        self.vel_z = 0.
    else:
      self.yaw = 0.
      self.pitch = 0.
      self.roll = 0.
      self.acc_x = 0.
      self.acc_y = 0.
      self.acc_z = 0.
      self.vel_x = 0.
      self.vel_y = 0.
      self.vel_z = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_9f.pack(_x.yaw, _x.pitch, _x.roll, _x.acc_x, _x.acc_y, _x.acc_z, _x.vel_x, _x.vel_y, _x.vel_z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.yaw, _x.pitch, _x.roll, _x.acc_x, _x.acc_y, _x.acc_z, _x.vel_x, _x.vel_y, _x.vel_z,) = _struct_9f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_9f.pack(_x.yaw, _x.pitch, _x.roll, _x.acc_x, _x.acc_y, _x.acc_z, _x.vel_x, _x.vel_y, _x.vel_z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.yaw, _x.pitch, _x.roll, _x.acc_x, _x.acc_y, _x.acc_z, _x.vel_x, _x.vel_y, _x.vel_z,) = _struct_9f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_9f = struct.Struct("<9f")
