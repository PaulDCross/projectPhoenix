"""autogenerated by genmsg_py from SonarConfig.msg. Do not edit."""
import roslib.message
import struct


class SonarConfig(roslib.message.Message):
  _md5sum = "c5e62524de5448688c893991a0f35975"
  _type = "custom_msg/SonarConfig"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 threshold
float32 contrast
float32 min_distance
float32 max_distance
float32 resolution
float32 gain
float32 left_limit
float32 right_limit
bool continuous
bool stare
int8 angular_resolution

"""
  __slots__ = ['threshold','contrast','min_distance','max_distance','resolution','gain','left_limit','right_limit','continuous','stare','angular_resolution']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','bool','bool','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       threshold,contrast,min_distance,max_distance,resolution,gain,left_limit,right_limit,continuous,stare,angular_resolution
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(SonarConfig, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.threshold is None:
        self.threshold = 0.
      if self.contrast is None:
        self.contrast = 0.
      if self.min_distance is None:
        self.min_distance = 0.
      if self.max_distance is None:
        self.max_distance = 0.
      if self.resolution is None:
        self.resolution = 0.
      if self.gain is None:
        self.gain = 0.
      if self.left_limit is None:
        self.left_limit = 0.
      if self.right_limit is None:
        self.right_limit = 0.
      if self.continuous is None:
        self.continuous = False
      if self.stare is None:
        self.stare = False
      if self.angular_resolution is None:
        self.angular_resolution = 0
    else:
      self.threshold = 0.
      self.contrast = 0.
      self.min_distance = 0.
      self.max_distance = 0.
      self.resolution = 0.
      self.gain = 0.
      self.left_limit = 0.
      self.right_limit = 0.
      self.continuous = False
      self.stare = False
      self.angular_resolution = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_8f2Bb.pack(_x.threshold, _x.contrast, _x.min_distance, _x.max_distance, _x.resolution, _x.gain, _x.left_limit, _x.right_limit, _x.continuous, _x.stare, _x.angular_resolution))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 35
      (_x.threshold, _x.contrast, _x.min_distance, _x.max_distance, _x.resolution, _x.gain, _x.left_limit, _x.right_limit, _x.continuous, _x.stare, _x.angular_resolution,) = _struct_8f2Bb.unpack(str[start:end])
      self.continuous = bool(self.continuous)
      self.stare = bool(self.stare)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_8f2Bb.pack(_x.threshold, _x.contrast, _x.min_distance, _x.max_distance, _x.resolution, _x.gain, _x.left_limit, _x.right_limit, _x.continuous, _x.stare, _x.angular_resolution))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 35
      (_x.threshold, _x.contrast, _x.min_distance, _x.max_distance, _x.resolution, _x.gain, _x.left_limit, _x.right_limit, _x.continuous, _x.stare, _x.angular_resolution,) = _struct_8f2Bb.unpack(str[start:end])
      self.continuous = bool(self.continuous)
      self.stare = bool(self.stare)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_8f2Bb = struct.Struct("<8f2Bb")
