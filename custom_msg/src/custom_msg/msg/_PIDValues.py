"""autogenerated by genmsg_py from PIDValues.msg. Do not edit."""
import roslib.message
import struct


class PIDValues(roslib.message.Message):
  _md5sum = "cbe725f7087e0c152f927826889dac26"
  _type = "custom_msg/PIDValues"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 yaw_Kp
float32 yaw_Ki
float32 yaw_Kd
float32 pitch_Kp
float32 pitch_Ki
float32 pitch_Kd
float32 roll_Kp
float32 roll_Ki
float32 roll_Kd
float32 depth_Kp
float32 depth_Ki
float32 depth_Kd

"""
  __slots__ = ['yaw_Kp','yaw_Ki','yaw_Kd','pitch_Kp','pitch_Ki','pitch_Kd','roll_Kp','roll_Ki','roll_Kd','depth_Kp','depth_Ki','depth_Kd']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       yaw_Kp,yaw_Ki,yaw_Kd,pitch_Kp,pitch_Ki,pitch_Kd,roll_Kp,roll_Ki,roll_Kd,depth_Kp,depth_Ki,depth_Kd
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(PIDValues, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.yaw_Kp is None:
        self.yaw_Kp = 0.
      if self.yaw_Ki is None:
        self.yaw_Ki = 0.
      if self.yaw_Kd is None:
        self.yaw_Kd = 0.
      if self.pitch_Kp is None:
        self.pitch_Kp = 0.
      if self.pitch_Ki is None:
        self.pitch_Ki = 0.
      if self.pitch_Kd is None:
        self.pitch_Kd = 0.
      if self.roll_Kp is None:
        self.roll_Kp = 0.
      if self.roll_Ki is None:
        self.roll_Ki = 0.
      if self.roll_Kd is None:
        self.roll_Kd = 0.
      if self.depth_Kp is None:
        self.depth_Kp = 0.
      if self.depth_Ki is None:
        self.depth_Ki = 0.
      if self.depth_Kd is None:
        self.depth_Kd = 0.
    else:
      self.yaw_Kp = 0.
      self.yaw_Ki = 0.
      self.yaw_Kd = 0.
      self.pitch_Kp = 0.
      self.pitch_Ki = 0.
      self.pitch_Kd = 0.
      self.roll_Kp = 0.
      self.roll_Ki = 0.
      self.roll_Kd = 0.
      self.depth_Kp = 0.
      self.depth_Ki = 0.
      self.depth_Kd = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_12f.pack(_x.yaw_Kp, _x.yaw_Ki, _x.yaw_Kd, _x.pitch_Kp, _x.pitch_Ki, _x.pitch_Kd, _x.roll_Kp, _x.roll_Ki, _x.roll_Kd, _x.depth_Kp, _x.depth_Ki, _x.depth_Kd))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.yaw_Kp, _x.yaw_Ki, _x.yaw_Kd, _x.pitch_Kp, _x.pitch_Ki, _x.pitch_Kd, _x.roll_Kp, _x.roll_Ki, _x.roll_Kd, _x.depth_Kp, _x.depth_Ki, _x.depth_Kd,) = _struct_12f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_12f.pack(_x.yaw_Kp, _x.yaw_Ki, _x.yaw_Kd, _x.pitch_Kp, _x.pitch_Ki, _x.pitch_Kd, _x.roll_Kp, _x.roll_Ki, _x.roll_Kd, _x.depth_Kp, _x.depth_Ki, _x.depth_Kd))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.yaw_Kp, _x.yaw_Ki, _x.yaw_Kd, _x.pitch_Kp, _x.pitch_Ki, _x.pitch_Kd, _x.roll_Kp, _x.roll_Ki, _x.roll_Kd, _x.depth_Kp, _x.depth_Ki, _x.depth_Kd,) = _struct_12f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_12f = struct.Struct("<12f")
