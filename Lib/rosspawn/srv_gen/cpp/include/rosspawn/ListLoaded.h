/* Auto-generated by genmsg_cpp for file /home/jamie/projectPhoenix/Lib/rosspawn/srv/ListLoaded.srv */
#ifndef ROSSPAWN_SERVICE_LISTLOADED_H
#define ROSSPAWN_SERVICE_LISTLOADED_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace rosspawn
{
template <class ContainerAllocator>
struct ListLoadedRequest_ {
  typedef ListLoadedRequest_<ContainerAllocator> Type;

  ListLoadedRequest_()
  {
  }

  ListLoadedRequest_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "rosspawn/ListLoadedRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "3d07bfda1268b4f76b16b7ba8a82665d"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::rosspawn::ListLoadedRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosspawn::ListLoadedRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ListLoadedRequest
typedef  ::rosspawn::ListLoadedRequest_<std::allocator<void> > ListLoadedRequest;

typedef boost::shared_ptr< ::rosspawn::ListLoadedRequest> ListLoadedRequestPtr;
typedef boost::shared_ptr< ::rosspawn::ListLoadedRequest const> ListLoadedRequestConstPtr;


template <class ContainerAllocator>
struct ListLoadedResponse_ {
  typedef ListLoadedResponse_<ContainerAllocator> Type;

  ListLoadedResponse_()
  : nodes()
  {
  }

  ListLoadedResponse_(const ContainerAllocator& _alloc)
  : nodes(_alloc)
  {
  }

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _nodes_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  nodes;


  ROS_DEPRECATED uint32_t get_nodes_size() const { return (uint32_t)nodes.size(); }
  ROS_DEPRECATED void set_nodes_size(uint32_t size) { nodes.resize((size_t)size); }
  ROS_DEPRECATED void get_nodes_vec(std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) const { vec = this->nodes; }
  ROS_DEPRECATED void set_nodes_vec(const std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) { this->nodes = vec; }
private:
  static const char* __s_getDataType_() { return "rosspawn/ListLoadedResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "3d07bfda1268b4f76b16b7ba8a82665d"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "3d07bfda1268b4f76b16b7ba8a82665d"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string[] nodes\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, nodes);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, nodes);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(nodes);
    return size;
  }

  typedef boost::shared_ptr< ::rosspawn::ListLoadedResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosspawn::ListLoadedResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ListLoadedResponse
typedef  ::rosspawn::ListLoadedResponse_<std::allocator<void> > ListLoadedResponse;

typedef boost::shared_ptr< ::rosspawn::ListLoadedResponse> ListLoadedResponsePtr;
typedef boost::shared_ptr< ::rosspawn::ListLoadedResponse const> ListLoadedResponseConstPtr;

struct ListLoaded
{

typedef ListLoadedRequest Request;
typedef ListLoadedResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ListLoaded
} // namespace rosspawn

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rosspawn::ListLoadedRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rosspawn::ListLoadedRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rosspawn::ListLoadedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::rosspawn::ListLoadedRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::rosspawn::ListLoadedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rosspawn/ListLoadedRequest";
  }

  static const char* value(const  ::rosspawn::ListLoadedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rosspawn::ListLoadedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::rosspawn::ListLoadedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rosspawn::ListLoadedRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rosspawn::ListLoadedResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rosspawn::ListLoadedResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rosspawn::ListLoadedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3d07bfda1268b4f76b16b7ba8a82665d";
  }

  static const char* value(const  ::rosspawn::ListLoadedResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3d07bfda1268b4f7ULL;
  static const uint64_t static_value2 = 0x6b16b7ba8a82665dULL;
};

template<class ContainerAllocator>
struct DataType< ::rosspawn::ListLoadedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rosspawn/ListLoadedResponse";
  }

  static const char* value(const  ::rosspawn::ListLoadedResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rosspawn::ListLoadedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string[] nodes\n\
\n\
\n\
";
  }

  static const char* value(const  ::rosspawn::ListLoadedResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rosspawn::ListLoadedRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ListLoadedRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rosspawn::ListLoadedResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.nodes);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ListLoadedResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<rosspawn::ListLoaded> {
  static const char* value() 
  {
    return "3d07bfda1268b4f76b16b7ba8a82665d";
  }

  static const char* value(const rosspawn::ListLoaded&) { return value(); } 
};

template<>
struct DataType<rosspawn::ListLoaded> {
  static const char* value() 
  {
    return "rosspawn/ListLoaded";
  }

  static const char* value(const rosspawn::ListLoaded&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<rosspawn::ListLoadedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3d07bfda1268b4f76b16b7ba8a82665d";
  }

  static const char* value(const rosspawn::ListLoadedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<rosspawn::ListLoadedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rosspawn/ListLoaded";
  }

  static const char* value(const rosspawn::ListLoadedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<rosspawn::ListLoadedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3d07bfda1268b4f76b16b7ba8a82665d";
  }

  static const char* value(const rosspawn::ListLoadedResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<rosspawn::ListLoadedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rosspawn/ListLoaded";
  }

  static const char* value(const rosspawn::ListLoadedResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ROSSPAWN_SERVICE_LISTLOADED_H

