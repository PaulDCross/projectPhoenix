/* Auto-generated by genmsg_cpp for file /home/dan/projectPhoenix/Lib/rosspawn/srv/ListAvailable.srv */
#ifndef ROSSPAWN_SERVICE_LISTAVAILABLE_H
#define ROSSPAWN_SERVICE_LISTAVAILABLE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace rosspawn
{
template <class ContainerAllocator>
struct ListAvailableRequest_ {
  typedef ListAvailableRequest_<ContainerAllocator> Type;

  ListAvailableRequest_()
  {
  }

  ListAvailableRequest_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "rosspawn/ListAvailableRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "fab8de62afa968c87d19b27e6526e661"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::rosspawn::ListAvailableRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosspawn::ListAvailableRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ListAvailableRequest
typedef  ::rosspawn::ListAvailableRequest_<std::allocator<void> > ListAvailableRequest;

typedef boost::shared_ptr< ::rosspawn::ListAvailableRequest> ListAvailableRequestPtr;
typedef boost::shared_ptr< ::rosspawn::ListAvailableRequest const> ListAvailableRequestConstPtr;


template <class ContainerAllocator>
struct ListAvailableResponse_ {
  typedef ListAvailableResponse_<ContainerAllocator> Type;

  ListAvailableResponse_()
  : bin_files()
  {
  }

  ListAvailableResponse_(const ContainerAllocator& _alloc)
  : bin_files(_alloc)
  {
  }

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _bin_files_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  bin_files;


  ROS_DEPRECATED uint32_t get_bin_files_size() const { return (uint32_t)bin_files.size(); }
  ROS_DEPRECATED void set_bin_files_size(uint32_t size) { bin_files.resize((size_t)size); }
  ROS_DEPRECATED void get_bin_files_vec(std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) const { vec = this->bin_files; }
  ROS_DEPRECATED void set_bin_files_vec(const std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) { this->bin_files = vec; }
private:
  static const char* __s_getDataType_() { return "rosspawn/ListAvailableResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "fab8de62afa968c87d19b27e6526e661"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "fab8de62afa968c87d19b27e6526e661"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string[] bin_files\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, bin_files);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, bin_files);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(bin_files);
    return size;
  }

  typedef boost::shared_ptr< ::rosspawn::ListAvailableResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosspawn::ListAvailableResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ListAvailableResponse
typedef  ::rosspawn::ListAvailableResponse_<std::allocator<void> > ListAvailableResponse;

typedef boost::shared_ptr< ::rosspawn::ListAvailableResponse> ListAvailableResponsePtr;
typedef boost::shared_ptr< ::rosspawn::ListAvailableResponse const> ListAvailableResponseConstPtr;

struct ListAvailable
{

typedef ListAvailableRequest Request;
typedef ListAvailableResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ListAvailable
} // namespace rosspawn

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rosspawn::ListAvailableRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rosspawn::ListAvailableRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rosspawn::ListAvailableRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::rosspawn::ListAvailableRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::rosspawn::ListAvailableRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rosspawn/ListAvailableRequest";
  }

  static const char* value(const  ::rosspawn::ListAvailableRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rosspawn::ListAvailableRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::rosspawn::ListAvailableRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rosspawn::ListAvailableRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rosspawn::ListAvailableResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rosspawn::ListAvailableResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rosspawn::ListAvailableResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fab8de62afa968c87d19b27e6526e661";
  }

  static const char* value(const  ::rosspawn::ListAvailableResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfab8de62afa968c8ULL;
  static const uint64_t static_value2 = 0x7d19b27e6526e661ULL;
};

template<class ContainerAllocator>
struct DataType< ::rosspawn::ListAvailableResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rosspawn/ListAvailableResponse";
  }

  static const char* value(const  ::rosspawn::ListAvailableResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rosspawn::ListAvailableResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string[] bin_files\n\
\n\
\n\
";
  }

  static const char* value(const  ::rosspawn::ListAvailableResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rosspawn::ListAvailableRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ListAvailableRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rosspawn::ListAvailableResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.bin_files);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ListAvailableResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<rosspawn::ListAvailable> {
  static const char* value() 
  {
    return "fab8de62afa968c87d19b27e6526e661";
  }

  static const char* value(const rosspawn::ListAvailable&) { return value(); } 
};

template<>
struct DataType<rosspawn::ListAvailable> {
  static const char* value() 
  {
    return "rosspawn/ListAvailable";
  }

  static const char* value(const rosspawn::ListAvailable&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<rosspawn::ListAvailableRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fab8de62afa968c87d19b27e6526e661";
  }

  static const char* value(const rosspawn::ListAvailableRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<rosspawn::ListAvailableRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rosspawn/ListAvailable";
  }

  static const char* value(const rosspawn::ListAvailableRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<rosspawn::ListAvailableResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fab8de62afa968c87d19b27e6526e661";
  }

  static const char* value(const rosspawn::ListAvailableResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<rosspawn::ListAvailableResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rosspawn/ListAvailable";
  }

  static const char* value(const rosspawn::ListAvailableResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ROSSPAWN_SERVICE_LISTAVAILABLE_H

